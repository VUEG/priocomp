import dotenv
import logging

from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
from importlib.machinery import SourceFileLoader

utils = SourceFileLoader("src.utils", "../src/utils.py").load_module()

## GLOBALS ---------------------------------------------------------------------

# dotenv project variables
dotenv_path = '../.env'
dotenv.load_dotenv(dotenv_path)

# Set up a remote provider
HTTP = HTTPRemoteProvider()

# Get datasets from the data manifest file
data_manifest = utils.parse_data_manifest("data_manifest.yml")
DATADRYAD_DATASETS = data_manifest["datadryad"]
PROVIDE_DATASETS = data_manifest["provide"]
EUROSTAT_DATASETS = data_manifest["eurostat"]

## Get data --------------------------------------------------------------------

rule get_datadryad_data:
    input:
        # Strip away https:// from the url
        HTTP.remote([url.replace("https://", "") for url in DATADRYAD_DATASETS],
                    username=os.environ.get("BEEHUB_USERNAME"),
                    password=os.environ.get("BEEHUB_PASSWORD"),
                    keep_local=False)
    output:
        # Keep the path structure from provider level onwards
        [url.replace("https://beehub.nl/environmental-geography-group",
                     "external") for url in DATADRYAD_DATASETS]
    log:
        "../logs/data_datadryad.log"
    run:
        # Configure logger
        fileHandler = logging.FileHandler(log[0])
        fileHandler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
        logger.logger.addHandler(fileHandler)

        for i in range(0, len(input)):
            shell("mv {0} {1}".format(input[i], output[i]))
            logger.info("Downloaded {0} to {1}".format(input[i], output[i]))

rule get_eurostat_data:
    input:
        HTTP.remote([url.replace("https://", "") for url in EUROSTAT_DATASETS],
                    username=os.environ.get("BEEHUB_USERNAME"),
                    password=os.environ.get("BEEHUB_PASSWORD"),
                    keep_local=False)
    output:
        [url.replace("https://beehub.nl/environmental-geography-group",
                     "external") for url in EUROSTAT_DATASETS]
    log:
        "../logs/data_eurostat.log"
    run:
        # Configure logger
        fileHandler = logging.FileHandler(log[0])
        fileHandler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
        logger.logger.addHandler(fileHandler)

        for i in range(0, len(input)):
            shell("mv {0} {1}".format(input[i], output[i]))
            logger.info("Downloaded {0} to {1}".format(input[i], output[i]))

rule get_provide_data:
    input:
        HTTP.remote([url.replace("https://", "") for url in PROVIDE_DATASETS],
                    username=os.environ.get("BEEHUB_USERNAME"),
                    password=os.environ.get("BEEHUB_PASSWORD"),
                    keep_local=False)
    output:
        [url.replace("https://beehub.nl/environmental-geography-group",
                     "external") for url in PROVIDE_DATASETS]
    log:
        "../logs/data_provide.log"
    run:
        # Configure logger
        fileHandler = logging.FileHandler(log[0])
        fileHandler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
        logger.logger.addHandler(fileHandler)

        for i in range(0, len(input)):
            shell("mv {0} {1}".format(input[i], output[i]))
            logger.info("Downloaded {0} to {1}".format(input[i], output[i]))
